<?php

/**
 * @file
 * Contains hooks for the twig_components module.
 */

use Drupal\Core\Asset\AttachedAssets;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function twig_components_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.twig_components':
      $readme = file_get_contents(__DIR__ . '/README.txt');
      // Remove the header.
      $readme = preg_replace("/.*\n====+/", '', $readme);
      // Turn section titles into headers.
      $readme = preg_replace("/\n([^\n]*)\n----+/", "\n<h2>$1</h2>\n", $readme);
      // Format ordered lists.
      $readme = preg_replace("/(\n[0-9]\..+?(?=\n\n))/s", "\n<ol>$1</ol>\n", $readme);
      $readme = preg_replace("/[0-9]\.(.+?)(?=(\n[0-9]\.|\n\n))/s", "\n<li>$1</li>\n", $readme);
      // Format unordered lists.
      $readme = preg_replace("/(\n-\s.+?(?=\n\n))/s", "\n<ul>$1</ul>\n", $readme);
      $readme = preg_replace("/-\s(.+?)(?=(\n-\s|\n\n))/s", "\n<li>$1</li>\n", $readme);
      // Wrap everything else.
      $readme = preg_replace("/(?<=\S\n\n)([^<]+?)(?=\n\n)/s", "\n<p>$1</p>\n", $readme);
      return $readme;
  }
}

/**
 * Implements hook_library_info_build().
 */
function twig_components_library_info_build() {
  $libraries = [];
  /** @var \Drupal\twig_components\TwigComponentPluginManager $manager */
  $manager = \Drupal::service('plugin.manager.twig_component');
  foreach ($manager->getDefinitions() as $plugin_id => $definition) {
    /** @var \Drupal\twig_components\TwigComponentInterface $instance */
    $instance = $manager->createInstance($plugin_id, $definition);
    $name = str_replace('twig_components/', '', $instance->getLibraryName());
    $libraries[$name] = $instance->getLibraryDefinition();
  }
  return $libraries;
}

/**
 * Implements hook_element_info_alter().
 */
function twig_components_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = '_twig_components_pre_render_text_format';
}

/**
 * Pre-render callback for text_format elements.
 */
function _twig_components_pre_render_text_format($variables) {
  if (\Drupal::moduleHandler()->moduleExists('ckeditor')) {
    /** @var \Drupal\twig_components\TwigComponentPluginManager $manager */
    $manager = \Drupal::service('plugin.manager.twig_component');
    /** @var \Drupal\Core\Asset\AssetResolver $asset_resolver */
    $asset_resolver = \Drupal::service('asset.resolver');
    /** @var \Drupal\Core\Asset\JsCollectionRenderer $js_renderer */
    $js_renderer = \Drupal::service('asset.js.collection_renderer');
    $renderer = \Drupal::service('renderer');
    // Get all scripts required for each Twig Component library.
    $scripts = [];
    foreach ($manager->getDefinitions() as $plugin_id => $definition) {
      /** @var \Drupal\twig_components\TwigComponentInterface $instance */
      $instance = $manager->createInstance($plugin_id, $definition);
      $assets = new AttachedAssets();
      $assets->setLibraries([$instance->getLibraryName()]);
      list($js_assets_header, $js_assets_footer) = $asset_resolver->getJsAssets($assets, FALSE);
      $build = $js_renderer->render(array_merge($js_assets_header, $js_assets_footer));
      $scripts[$definition['tag']] = $renderer->renderRoot($build);
    }
    // Pass the rendered script tags to be lazy-loaded in CKEditor.
    $variables['#attached']['drupalSettings']['twigComponentsCKEditorScripts'] = $scripts;
    $variables['#attached']['library'][] = 'twig_components/ckeditor';
  }
  return $variables;
}
